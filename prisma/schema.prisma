// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src"
//   outputToNestJsResourceStructure = "true"
//   flatResourceStructure           = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   generateFileTypes               = "dto"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   classValidation                 = "true"
//   fileNamingStyle                 = "camel"
//   noDependencies                  = "false"
//   outputType                      = "class"
//   definiteAssignmentAssertion     = "false"
//   requiredResponseApiProperty     = "true"
//   prettier                        = "true"
//   outputApiPropertyType           = "true"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String      @unique
  name      String?
  image     String?
  /// @DtoEntityHidden()
  password  String
  /// @DtoEntityHidden()
  PlayLists PlayLists[]
  /// @DtoEntityHidden()
  Favorite  Favorite[]
}

model Artists {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String   @unique
  image  String
  albums Albums[]
  tracks Tracks[]
}

model Albums {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist    Artists  @relation(fields: [artistsId], references: [id])
  artistsId String   @db.Uuid
  image     String
  name      String
  tracks    Tracks[]
}

model Tracks {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  album         Albums          @relation(fields: [albumId], references: [id])
  title         String
  image         String
  duration      Decimal?
  durationText  String?
  url           String?
  albumId       String          @db.Uuid
  artist        Artists         @relation(fields: [artistsId], references: [id])
  artistsId     String          @db.Uuid
  playListItems PlayListItems[]
  Favorite      Favorite[]
}

model PlayLists {
  id      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title   String
  items   PlayListItems[]
  Users   Users?          @relation(fields: [usersId], references: [id])
  usersId String?         @db.Uuid
  public  Boolean         @default(true)
}

model PlayListItems {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  track       Tracks     @relation(fields: [tracksId], references: [id])
  tracksId    String     @db.Uuid
  playLists   PlayLists? @relation(fields: [playListsId], references: [id])
  playListsId String?    @db.Uuid
}

model Favorite {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  track    Tracks  @relation(fields: [tracksId], references: [id])
  tracksId String  @db.Uuid
  Users    Users?  @relation(fields: [usersId], references: [id])
  usersId  String? @db.Uuid
}

// model Podcasts {
//   id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   title       String
//   description String
//   host        String
// }

// model PodcastEpisode {
//   id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   title       String
//   description String
//   releaseDate DateTime
//   host        String   @unique
// }
